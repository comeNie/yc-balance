<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ai.slp.balance.dao.mapper.interfaces.FunActivityCouponRelMapper" >
  <resultMap id="BaseResultMap" type="com.ai.slp.balance.dao.mapper.bo.FunActivityCouponRel" >
    <id column="ID" property="id" jdbcType="INTEGER" />
    <result column="ACTIVITY_ID" property="activityId" jdbcType="INTEGER" />
    <result column="template_id" property="templateId" jdbcType="INTEGER" />
    <result column="coupon_account" property="couponAccount" jdbcType="INTEGER" />
    <result column="acquire_days" property="acquireDays" jdbcType="INTEGER" />
    <result column="CREATE_TIME" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID, ACTIVITY_ID, template_id, coupon_account, acquire_days, CREATE_TIME
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ai.slp.balance.dao.mapper.bo.FunActivityCouponRelCriteria" >
    select
    <if test="distinct" >
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from fun_activity_coupon_rel
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="Integer" >
    select 
    <include refid="Base_Column_List" />
    from fun_activity_coupon_rel
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="Integer" >
    delete from fun_activity_coupon_rel
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ai.slp.balance.dao.mapper.bo.FunActivityCouponRelCriteria" >
    delete from fun_activity_coupon_rel
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ai.slp.balance.dao.mapper.bo.FunActivityCouponRel" >
    insert into fun_activity_coupon_rel (ID, ACTIVITY_ID, template_id, 
      coupon_account, acquire_days, CREATE_TIME
      )
    values (#{id,jdbcType=INTEGER}, #{activityId,jdbcType=INTEGER}, #{templateId,jdbcType=INTEGER}, 
      #{couponAccount,jdbcType=INTEGER}, #{acquireDays,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ai.slp.balance.dao.mapper.bo.FunActivityCouponRel" >
    insert into fun_activity_coupon_rel
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="activityId != null" >
        ACTIVITY_ID,
      </if>
      <if test="templateId != null" >
        template_id,
      </if>
      <if test="couponAccount != null" >
        coupon_account,
      </if>
      <if test="acquireDays != null" >
        acquire_days,
      </if>
      <if test="createTime != null" >
        CREATE_TIME,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="activityId != null" >
        #{activityId,jdbcType=INTEGER},
      </if>
      <if test="templateId != null" >
        #{templateId,jdbcType=INTEGER},
      </if>
      <if test="couponAccount != null" >
        #{couponAccount,jdbcType=INTEGER},
      </if>
      <if test="acquireDays != null" >
        #{acquireDays,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ai.slp.balance.dao.mapper.bo.FunActivityCouponRelCriteria" resultType="java.lang.Integer" >
    select count(*) from fun_activity_coupon_rel
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update fun_activity_coupon_rel
    <set >
      <if test="record.id != null" >
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.activityId != null" >
        ACTIVITY_ID = #{record.activityId,jdbcType=INTEGER},
      </if>
      <if test="record.templateId != null" >
        template_id = #{record.templateId,jdbcType=INTEGER},
      </if>
      <if test="record.couponAccount != null" >
        coupon_account = #{record.couponAccount,jdbcType=INTEGER},
      </if>
      <if test="record.acquireDays != null" >
        acquire_days = #{record.acquireDays,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update fun_activity_coupon_rel
    set ID = #{record.id,jdbcType=INTEGER},
      ACTIVITY_ID = #{record.activityId,jdbcType=INTEGER},
      template_id = #{record.templateId,jdbcType=INTEGER},
      coupon_account = #{record.couponAccount,jdbcType=INTEGER},
      acquire_days = #{record.acquireDays,jdbcType=INTEGER},
      CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ai.slp.balance.dao.mapper.bo.FunActivityCouponRel" >
    update fun_activity_coupon_rel
    <set >
      <if test="activityId != null" >
        ACTIVITY_ID = #{activityId,jdbcType=INTEGER},
      </if>
      <if test="templateId != null" >
        template_id = #{templateId,jdbcType=INTEGER},
      </if>
      <if test="couponAccount != null" >
        coupon_account = #{couponAccount,jdbcType=INTEGER},
      </if>
      <if test="acquireDays != null" >
        acquire_days = #{acquireDays,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ai.slp.balance.dao.mapper.bo.FunActivityCouponRel" >
    update fun_activity_coupon_rel
    set ACTIVITY_ID = #{activityId,jdbcType=INTEGER},
      template_id = #{templateId,jdbcType=INTEGER},
      coupon_account = #{couponAccount,jdbcType=INTEGER},
      acquire_days = #{acquireDays,jdbcType=INTEGER},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=INTEGER}
  </update>
</mapper>